#!/usr/bin/env python3.7

import os
import json
import sys, getopt as gopt

import subprocess as sp

# import readline
# import pathlib

from ftplib import FTP_TLS, Error
from getpass import getpass
from base64 import b64encode, b64decode
from cryptography.fernet import Fernet, InvalidToken
import hashlib as hl


# helper

class App:
    actions = [
        {
            'name': str,
            'method': (),
        },
    ]

    hostname = ''
    username = ''
    password = ''
    conn = FTP_TLS()


    def __init__(self, creds):
       self.conn = FTP_TLS(creds['hostname'], creds['username'], creds['password'])
       self.hostname = creds['hostname']
       self.username = creds['username']
       self.password = creds['password']
    
    def start(self):

        print('Initializing...\n')

        actions = [
            {
                'name': 'View files',
                'method': self.viewFilesAction,
            },
            {
                'name': 'Upload',
                'method': self.uploadAction,
            },
            {
                'name': 'Download',
                'method': self.downloadAction,
            },
            {
                'name': 'Quit',
                'method': self.exit,
            }
        ]

        self.actions = actions

        print('App initialized.\n')
    
        try:
            print('Connecting to host server {}\n'.format(self.hostname))
            connection = self.conn.connect()
        except (Error) as e:
            print('Connection error: {}\n'.format(e))
            print('Exiting...\r\n')
        else:
            print('Host ready! Message from host: {}\n'.format(connection))
            self.loginUser()
    

    def render(self):
        print('Welcome back {}! Please choose one of the following options:\n'.format(self.username))

        self.showActions()

        self.promptUserAction()
        
    
    def showActions(self):
        inlinestr = ''
        for i in range(len(self.actions)):
            inlinestr += '[{0}] - {1}\t'.format(i, self.actions[i]['name'])
        
        print(f'{inlinestr}\r\n')


    def promptUserAction(self):
        flag = True

        while flag:
            try:
                useraction = int(input('Enter an option number: '))
                
                if useraction >= len(self.actions):
                    raise ValueError()
                else:
                    flag = False
            except(TypeError, NameError, KeyboardInterrupt, ValueError, SyntaxError):
                print('Invalid input!\n')
            else:
                print('Action: {}\n'.format(self.actions[useraction]['name']))
                self.actions[useraction]['method']()
    

    def getServerDirectoryFiles(self):
        print('Fetching files...\n')
        try:
            response = self.conn.retrlines('LIST')
        except Error as e:
            print('Server error: {}\n'.format(e))
            raise Error()
        else:
            print('Files fetched!\n')
            print(response)


    def loginUser(self):
        print('Authenticating user {}\n'.format(self.username))
        try:
            response = self.conn.login(self.username, self.password)
        except Error as e:
            print('Authentication error: {}\n'.format(e))
            print('Exiting...\r\n')
        else:
            print('Authentication complete: {}\n'.format(response))
            self.render()


    def viewFilesAction(self):
        try:
            self.getServerDirectoryFiles()
        except Error as e:
            print('Please restart the app.')
        else:
            print('Choose next course of action')
            self.promptUserAction()
    

    def downloadAction(self):
        # self.getServerDirectoryFiles()
        conn = self.conn

        userDir = os.getcwd()
        userDirInput = str(input('Enter path to a directory other than your current one (optional): '))


        if userDirInput != '':
            
            if userDirInput.startswith('~'):
                userDirInput = os.path.join(os.path.expanduser('~'), userDirInput[2:])
            
            os.chdir(userDirInput)

            userDir = os.path.realpath(userDirInput)
        
        # Lists of files on both server and local machine
        serverFilesList = conn.nlst()
        localFilesList = os.listdir(userDir)

        num_rows = max(len(serverFilesList), len(localFilesList))


        print(f'|\tServer ({conn.pwd()})\t|\tLocal ({userDir})\t|')

        # Longest word in both the lists for better indentation etc (probably will deprecate)

        longestServerWord = len(max(serverFilesList, key=len))
        longestLocalWord = len(max(localFilesList, key=len))

        for i in range(0, num_rows):

            if i >= len(serverFilesList):

                print(f'|{insertSpaces(longestServerWord)}|{localFilesList[i]}{insertSpaces(longestLocalWord - len(localFilesList[i]))}|')

            elif i >= len(localFilesList):

                print(f'|{serverFilesList[i]}{insertSpaces(longestServerWord - len(serverFilesList[i]))}|{insertSpaces(longestLocalWord)}|')

            else:

                print(f'|{serverFilesList[i]}{insertSpaces(longestServerWord - len(serverFilesList[i]))}|{localFilesList[i]}{insertSpaces(longestLocalWord - len(localFilesList[i]))}|')

        inputFiles = [str(_).strip() for _ in str(input('Input file name to download (separate multiple names with comma): ')).split(',')] 

        # print(inputFiles)

        for i in inputFiles:
            try:
                with open(i, 'wb') as file:
                    response = conn.retrbinary(f'RETR {i}', file.write)
            
            except Error as e:
                print('Server error: {}\n'.format(e))
                raise Error()
            else:
                print(f'File \'{i}\' downloaded!\n')
                print(response)
                file.close()
                print('Choose next course of action')
                self.promptUserAction()



    
    def exit(self):
        print('Logging out...\n')
        try:
            response = self.conn.quit()
        except Error as e:
            print('Error occured while logging out.\nError: {}'.format(e))
        else:
            print('Log out successful!\n{}\r\n'.format(response))
    

    def uploadAction(self):
        conn = self.conn

        userDir = os.getcwd()
        userDirInput = str(input('Enter path to a directory other than your current one (optional): '))


        if userDirInput != '':
            
            if userDirInput.startswith('~'):
                userDirInput = os.path.join(os.path.expanduser('~'), userDirInput[2:])
            
            os.chdir(userDirInput)

            userDir = os.path.realpath(userDirInput)
        
        # Lists of files on both server and local machine
        serverFilesList = conn.nlst()
        localFilesList = os.listdir(userDir)
        
        # Total number of rows of the table, considering the maximum length of either of the lists
        num_rows = max(len(serverFilesList), len(localFilesList))


        print(f'|\tServer ({conn.pwd()})\t|\tLocal ({userDir})\t|')

        # Longest word in both the lists for better indentation etc (probably will deprecate)

        longestServerWord = len(max(serverFilesList, key=len))
        longestLocalWord = len(max(localFilesList, key=len))

        for i in range(0, num_rows):

            if i >= len(serverFilesList):

                print(f'|{insertSpaces(longestServerWord)}|{localFilesList[i]}{insertSpaces(longestLocalWord - len(localFilesList[i]))}|')

            elif i >= len(localFilesList):

                print(f'|{serverFilesList[i]}{insertSpaces(longestServerWord - len(serverFilesList[i]))}|{insertSpaces(longestLocalWord)}|')

            else:

                print(f'|{serverFilesList[i]}{insertSpaces(longestServerWord - len(serverFilesList[i]))}|{localFilesList[i]}{insertSpaces(longestLocalWord - len(localFilesList[i]))}|')

        inputFiles = [str(_).strip() for _ in str(input('Input file name to upload (separate multiple names with comma): ')).split(',')]

        # print(inputFiles)

        for i in inputFiles:
            
            if not i.startswith('./'):
                i = f'./{i}'
            
            item = os.path.realpath(i)

            try:
                fp = open(item, 'rb')
                response = conn.storbinary(f'STOR {os.path.basename(item)}', fp)
            except Error as e:
                print('Server error: {}\n'.format(e))
                raise Error()
            else:
                print(f'File \'{os.path.basename(item)}\' uploaded!\n')
                print(response)
                fp.close()
                print('Choose next course of action')
                self.promptUserAction()
            
            # print(parseLocalFile(item))


class User:
    storePath = ''
    
    def __init__(self):
        self.storePath = '{}/.ftplogin_python/'.format(os.path.expanduser('~'))
    
    def authenticate(self):
        # print('Authenticate karna hai abhi ruko')
        passcode = str(getpass('Enter the passcode: '))

        file = open(os.path.join(self.storePath, 'user.json'))
        data = json.load(file)
        file.close()

        if passcode == decryptItem(passcode, data['authCode'].encode()):
            try:
                user = {
                    'hostname': decryptItem(passcode, bytes(data['hostname'], 'utf-8')),
                    'username': decryptItem(passcode, bytes(data['username'], 'utf-8')),
                    'password': decryptItem(passcode, bytes(data['password'], 'utf-8')),
                }
            except Error:
                print('Error while authenticating, please try again.')
                raise Error()
            else:
                return user
        else:
            print('Passcode doesn\'t match.')
            raise Error()
    
    def config(self):
        print('''
        Welcome to the configuration setup for ftplogin utility.
        ''')

        hostname = str(input('Enter hostname: '))
        username = str(input('Enter username: '))
        password = str(input('Enter password: '))

        print('Great! You are almost there. Please enter a strong passcode which will be required everytime you use this utility. This is for your own security.\r\n')

        authCode = str(input('Set a passcode for using this utility:'))

        credentials = {
            'hostname': encryptItems(authCode, hostname).decode(),
            'username': encryptItems(authCode, username).decode(),
            'password': encryptItems(authCode, password).decode(),
            'authCode': encryptItems(authCode, authCode).decode(),
        }

        json_credentials = json.dumps(credentials)

        print('Saving the changes...')

        with open(os.path.join(self.storePath, 'user.json'), 'w') as outfile:
            outfile.write(json_credentials)
        
        print('Configuration setup complete! Please restart the software to continue.')
        


def encryptItems(key, string):
    key = bytes(key, 'utf-8')

    m = hl.md5()
    m.update(key)
    key = m.hexdigest().encode()

    key = b64encode(key)
    fer = Fernet(key)
    string = fer.encrypt(bytes(string, 'utf-8'))
    string = b64encode(string)
    return string


def decryptItem(key, string):
    key = bytes(key, 'utf-8')

    m = hl.md5()
    m.update(key)
    key = m.hexdigest().encode()

    key = b64encode(key)
    string = b64decode(string)
    fer = Fernet(key)

    try:
        string = fer.decrypt(string)
    except InvalidToken as e:
        raise Error()
    
    string = string.decode('utf-8')
    return string


def parseLocalFile(item):
    if os.path.isdir(item):
        print('The input is a directory with the following items inside it:')

        dirName = os.path.basename(item)
        itemsList = os.listdir(item)
        for i in itemsList:
            parseLocalFile(os.path.realpath(i))

    print(item)


def insertSpaces(num):
    spaces = ' '
    spaces *= num
    return spaces

# main

if __name__ == '__main__':
    
    user = User()

    givenArguments = sys.argv[1:]
    options = 'u:v:hdn'
    long_options = ['user=', 'verbose=', 'help', 'dev', 'new']


    # print(os.path.realpath(newFile))
    
    if (not os.path.isdir(user.storePath)):
        os.umask
        os.mkdir(user.storePath, 0o777)
        try:
            user.config()
        except Error as e:
            os.remove(user.storePath)
            print('Please retry.')
    else:
        
        print('''
        Welcome to FTP Login Utility. Please choose an action.
        ''')
        print('[0]: Authenticate and work')
        print('[1]: Enter configuration')
        print('\r\n')

        userFirstInteraction = int(input('Enter the digit: '))

        if userFirstInteraction == 0:
            
            try:
                credentials = user.authenticate()
            except Error:
                print('Error in authenticating user. Please try again.')
            else:
                app = App(credentials)
                app.start()
            
        elif userFirstInteraction == 1:
            user.config()


